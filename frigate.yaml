blueprint:
  name: Frigate Notification with MQTT
  description: |
    ## Frigate Mobile App Notification with MQTT

    This blueprint will send a notification to your device or publish to MQTT when a Frigate event for the selected camera is fired. You can choose to notify via mobile app, MQTT, or both.

    With this blueprint, you may send the notification to multiple devices by leaving "Device" blank and instead use a [notification group][1].

    ### Required entities:
      - Frigate Camera Name
      - Mobile App Device **or** the name of a Notification Group **or** MQTT topic

    [1]: https://companion.home-assistant.io/docs/notifications/notifications-basic#sending-notifications-to-multiple-devices

  domain: automation
  source_url: https://gist.github.com/hunterjm/23c1588a9f2b8b9c2a62ffc364e17f8c
  input:
    camera:
      name: Frigate Camera
      description: The name of the camera as defined in your frigate configuration.
    notify_device:
      name: Device
      description: The device must run the official Home Assistant app to receive notifications.
      default: false
      selector:
        device:
          integration: mobile_app
    notify_group:
      name: Notification Group
      description: The name of the notification group to call.
      default: ""
    mqtt_topic:
      name: (Optional) MQTT Topic
      description: The MQTT topic where the notification will be published.
      default: ""
    base_url:
      name: (Optional) Base URL
      description: The external URL for your Home Assistant instance.
      default: ""
    zone_filter:
      name: (Optional) Zone Filter
      description: Only notify if object has entered a defined zone.
      default: false
      selector:
        boolean:
    zones:
      name: (Optional) Trigger Zones
      description: A list of zones you wish to receive notifications for.
      default: []
      selector:
        object:
    labels:
      name: (Optional) Trigger Objects
      description: A list of objects you wish to receive notifications for.
      default: []
      selector:
        object:
    presence_filter:
      name: (Optional) Presence Filter
      description: Only notify if selected presence entity is not "home".
      default: ""
      selector:
        entity:
    cooldown:
      name: (Optional) Cooldown
      description: Delay before sending another notification for this camera after the last event.
      default: 30
      selector:
        number:
          max: 300
          min: 0
          unit_of_measurement: seconds
    silence_timer:
      name: (Optional) Silence Notifications
      description: How long to silence notifications for this camera when requested.
      default: 30
      selector:
        number:
          max: 300
          min: 0
          unit_of_measurement: minutes

mode: single
max_exceeded: silent

trigger:
  platform: mqtt
  topic: frigate/events
  payload: !input camera
  value_template: "{{ value_json['after']['camera'] }}"

variables:
  id: "{{ trigger.payload_json['after']['id'] }}"
  camera: "{{ trigger.payload_json['after']['camera'] }}"
  camera_name: "{{ camera | replace('_', ' ') | title }}"
  object: "{{ trigger.payload_json['after']['label'] }}"
  label: "{{ object | title }}"
  entered_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"
  type: "{{ trigger.payload_json['type'] }}"
  base_url: !input base_url
  group_target: !input notify_group
  mqtt_topic: !input mqtt_topic
  zone_only: !input zone_filter
  input_zones: !input zones
  zones: "{{ input_zones | list }}"
  input_labels: !input labels
  labels: "{{ input_labels | list }}"
  presence_entity: !input presence_filter

condition:
  - "{{ type != 'end' }}"
  - "{{ not zone_only or entered_zones|length > 0 }}"
  - "{{ not zones|length or zones|select('in', entered_zones)|list|length > 0 }}"
  - "{{ not labels|length or object in labels }}"
  - "{{ not presence_entity or not is_state(presence_entity, 'home') }}"

action:
  - choose:
      - conditions: "{{ not group_target and mqtt_topic == '' }}"
        sequence:
          - device_id: !input notify_device
            domain: mobile_app
            type: notify
            message: 'A {{ label }} was detected on the {{ camera_name }} camera.'
            data:
              tag: '{{ id }}'
              group: 'frigate-notification-{{ camera }}'
              image: '/api/frigate/notifications/{{id}}/thumbnail.jpg?format=android'  # Android
              attachment:  # iOS
                url: '/api/frigate/notifications/{{id}}/thumbnail.jpg'
      - conditions: "{{ mqtt_topic != '' }}"
        sequence:
          - service: mqtt.publish
            data:
              topic: "{{ mqtt_topic }}"
              payload: >
                {
                  "camera": "{{ camera_name }}",
                  "label": "{{ label }}",
                  "image": "/api/frigate/notifications/{{id}}/thumbnail.jpg",
                  "clip_url": "{{ base_url }}/api/frigate/notifications/{{id}}/{{camera}}/clip.mp4"
                }
    default:
      - service: "notify.{{ group_target }}"
        data:
          message: 'A {{ label }} was detected on the {{ camera_name }} camera.'
          data:
            tag: '{{ id }}'
            group: 'frigate-notification-{{ camera }}'
            image: '/api/frigate/notifications/{{id}}/thumbnail.jpg?format=android'  # Android
            attachment:  # iOS
              url: '/api/frigate/notifications/{{id}}/thumbnail.jpg'
  - wait_for_trigger:
      - platform: mqtt
        topic: frigate/events
        payload: "{{ id }}"
        value_template: "{{ value_json['after']['id'] }}"
      timeout:
        minutes: 2
      continue_on_timeout: false
  - condition: template
    value_template: "{{ wait.trigger.payload_json['type'] == 'end' }}"
  - choose:
      - conditions: "{{ mqtt_topic != '' }}"
        sequence:
          - service: mqtt.publish
            data:
              topic: "{{ mqtt_topic }}"
              payload: >
                {
                  "camera": "{{ camera_name }}",
                  "label": "{{ label }}",
                  "clip_url": "{{ base_url }}/api/frigate/notifications/{{id}}/{{camera}}/clip.mp4",
                  "image": "/api/frigate/notifications/{{id}}/thumbnail.jpg"
                }
      default:
        - device_id: !input notify_device
          domain: mobile_app
          type: notify
          message: 'A {{ label }} was detected on the {{ camera_name }} camera.'
          data:
            tag: '{{ id }}'
            group: 'frigate-notification-{{ camera }}'
            url: '{{ base_url }}/api/frigate/notifications/{{id}}/{{camera}}/clip.mp4'  # iOS
            clickAction: '{{ base_url }}/api/frigate/notifications/{{id}}/{{camera}}/clip.mp4'  # Android
            image: '/api/frigate/notifications/{{id}}/thumbnail.jpg?format=android'  # Android
            sound: none
            attachment:  # iOS
              url: '/api/frigate/notifications/{{id}}/thumbnail.jpg'
              actions:
                - action: URI
                  title: View Clip
                  uri: '{{ base_url }}/api/frigate/notifications/{{id}}/{{camera}}/clip.mp4'
                - action: URI
                  title: View Snapshot
                  uri: '{{ base_url }}/api/frigate/notifications/{{id}}/snapshot.jpg'
                - action: 'silence-{{ camera }}'
                  title: Silence Notifications
                  destructive: true
